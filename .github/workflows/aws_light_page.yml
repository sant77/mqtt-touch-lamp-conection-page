name: Deploy Page mqqt

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                     # Cambia a tu región de AWS
  EC2_INSTANCE_IP: 3.228.254.175          # Cambia a la IP pública de tu instancia EC2
  EC2_SSH_KEY: ${{ secrets.LIGHT_SSH_KEY }}   # Clave privada SSH en formato PEM
  EC2_USER: ubuntu                        # Usuario de la instancia (ec2-user para Amazon Linux)
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}  # Nombre de usuario de Docker Hub
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  # Contraseña de Docker Hub

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
        
    - name: Log in to Docker Hub
      run: |
        echo "${{ env.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ env.DOCKER_HUB_USERNAME }}" --password-stdin

    - name: Build Docker images with custom environment variable
      run: |
        echo "NG_APP_ADDRESS=${{ env.EC2_INSTANCE_IP }}" > frontend/.env
        echo "NG_APP_PORT_USER=80" >> frontend/.env
        echo "NG_APP_PORT_MQTT=80" >> frontend/.env
        
    - name: Build Docker images
      run: |
        cd docker-compose
        docker-compose -f docker-compose.yml build

    - name: Push Docker images to Docker Hub
      run: |
        cd docker-compose
        docker-compose -f docker-compose.yml push
        
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ env.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
        chmod 600 ~/.ssh/ec2_key.pem
        echo "Instalada la clave SSH"

    - name: Create app directory on EC2
      run: |
        ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_INSTANCE_IP }} "mkdir -p /home/ubuntu/app"

    - name: Copy files to AWS LIGHT
      run: |
        rsync -avz -e "ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no" --exclude .git . ubuntu@${{ env.EC2_INSTANCE_IP }}:/home/ubuntu/app

    - name: Stop and remove all running containers
      run: |
        ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_INSTANCE_IP }} << 'EOF'
        cd /home/ubuntu/app/docker-compose
        sudo docker-compose down || true  # Detiene y elimina los contenedores, incluso si no hay ninguno en ejecución
        echo "Todos los contenedores detenidos y eliminados"
        EOF

    - name: pull images
      run: |
        ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_INSTANCE_IP }} << 'EOF'
        cd /home/ubuntu/app/docker-compose
        sudo docker-compose pull
        EOF
    - name: Deploy application
      run: |
        ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_INSTANCE_IP }} << 'EOF'
        cd /home/ubuntu/app/docker-compose
        sudo docker-compose up -d
        EOF
